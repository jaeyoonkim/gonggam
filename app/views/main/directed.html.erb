<style>
.world {
  border: 1px solid #eee;
}
svg {
  background-color: #fff;
  cursor: default;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}
svg:not(.active):not(.ctrl) {
  //cursor: crosshair;
}

path.link {
  fill: none;
  stroke: #000;
  stroke-width: 4px;
  cursor: default;
}

svg:not(.active):not(.ctrl) path.link {
  cursor: pointer;
}

path.link.selected {
  stroke-dasharray: 10,2;
}

path.link.dragline {
  pointer-events: none;
}

path.link.hidden {
  stroke-width: 0;
}

circle.node {
  stroke-width: 1.5px;
  cursor: pointer;
}
circle.node.root
{
  fill:#eee;
  stroke: #444;
}
circle.node.music
{
  fill:#FF4040;
  stroke: #444;
  
}
circle.node.video
{
  fill:#0B61A4;
  stroke: #444;
  
}
circle.node.novel
{
  fill:#00B454;
  stroke: #444;
  
}
circle.node.drawing
{
  fill:#FF9401;
  stroke: #444;
  
}

circle.node.reflexive {
  stroke-width: 2.5px;
}

text {
  font: 12px sans-serif;
  pointer-events: none;
}

text.id {
  text-anchor: middle;
  font-weight: bold;
}
</style>

<!-- Button to trigger modal -->
<!-- Modal -->
<a class="btn btn-large" href="javascript:modeControlOn();" id="control_btn_on">Control:Off</a>
<a class="btn btn-large btn-danger" href="javascript:modeControlOff();" id="control_btn_off">Control:On</a>
<a class="btn btn-large" href="javascript:releaseAllNodes();" id="release_btn_on">Dynamic Nodes:Off</a>
<a class="btn btn-large btn-danger" href="javascript:fixAllNodes();" id="release_btn_off">Dynamic Nodes:On</a>
<script>
  $("#control_btn_off").hide();
  $("#control_btn_on").click(function(){
    $(this).hide();
    $("#control_btn_off").show();
  })
  $("#control_btn_off").click(function(){
    $(this).hide();
    $("#control_btn_on").show();
  })
  $("#release_btn_on").hide();
  $("#release_btn_on").click(function(){
    $(this).hide();
    $("#release_btn_off").show();
  })
  $("#release_btn_off").click(function(){
    $(this).hide();
    $("#release_btn_on").show();
  })
</script>
<div class="world" id="world"></div>

<div id="infobox" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <a type="button" class="close" data-dismiss="modal" aria-hidden="true">×</a>
    <h3 id="myModalLabel">Add Gongam</h3>
  </div>
  <div class="modal-body">
    <form>
      <label for="title">Title</label>
      <input id="node_title" class="input-xlarge" type="text" name="title">
      <label for="artist">Artist</label>
      <input id="node_artist" class="input-xlarge" type="text" name="artist">
      <label for="type">Type</label>
      <select id="node_type" class="input-xlarge" name="type">
        <option value="drawing">Drawing</option>
        <option value="music">Music</option>
        <option value="video">Video</option>
        <option value="novel">Novel</option>
      </select>
      <label for="link">Link</label>
      <input id="node_link" class="input-xlarge" type="text" name="link">
    </form>
  </div>
  <div class="modal-footer">
    <a id="close_btn" class="btn" data-dismiss="modal" aria-hidden="true">Close</a>
    <a id="save_btn" class="btn btn-primary">Save changes</a>
  </div>
</div>


<div id="infopopup" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <a type="button" class="close" data-dismiss="modal" aria-hidden="true">×</a>
    <h3 id="info_title">Information</h3>
  </div>
  <div class="modal-body">
    <form>
      <div style="height:50px;">
        <div  class="pull-right">by <span id="info_artist"></span></div>
      </div>

      <div id="info_content"></div>
      <span id="info_type"></span>
      <span id="info_link"></span>
    </form>
  </div>
  <div class="modal-footer">
    <a id="close_btn" class="btn" data-dismiss="modal" aria-hidden="true">Close</a>
    <a id="save_btn" class="btn btn-primary">Save changes</a>
  </div>
</div>


<script>
/*settings*/
var root_radius = 40;
var radius = 12;
var link_dist = 60;
/**********/

$("#infobox").modal('hide')
$("#infopopup").modal('hide')
// set up SVG for D3
var width  = 900,
    height = 500,
    colors = d3.scale.category10();

var svg = d3.select('#world')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

// set up initial nodes and links
//  - nodes are known by 'id', not by index in array.
//  - reflexive edges are indicated on the node (as a bold black circle).
//  - links are always source < target; edge directions are set by 'left' and 'right'.

//get nodes

var nodes = [],
  lastNodeId = 0,
  links = [];

var dynamic_node_mode = false;
var control_mode = false;
function modeControlOff()
{
  control_mode = false;
  circle
    .on('mousedown.drag', null)
    .on('touchstart.drag', null);
  svg.classed('ctrl', false);
}

function modeControlOn()
{
  control_mode = true;
  circle.call(force.drag);
  svg.classed('ctrl', true);
}

function getNode(myArray, id )
{
  var result = $.grep(myArray, function(e){ return e.id == id; });

  if (result.length == 0) {
    return false;
  } else if (result.length == 1) {
    return result[0]
  } else {
    return false; // should be only one item
  }
}

$(function(){
  $.ajax({
    url: '/nodes',
    method: 'get',
    dataType: 'json',
    success: function(data)
    {
      for ( item in data)
      {
        nodes.push({
          id: data[item].id,
          root: data[item].root,
          fixed: !dynamic_node_mode || data[item].root,
          reflexive : false,
          title: data[item].title,
          artist: data[item].artist,
          content: data[item].content,
          link: data[item].link })
      }
    }
  });
  $.ajax({
    url: '/links',
    method: 'get',
    dataType: 'json',
    success: function(data)
    {
      for ( item in data)
      {
        links.push({
          source: getNode(nodes, data[item].start_id),
          target: getNode(nodes, data[item].end_id),
          left: false,
          right: false
        })
      }
      initWorld();
    }
  });
})

/*var nodes = [
    {fixed:false, id: 0, reflexive: true, title: 'Love', root:true},
    //{fixed:false, id: 1, reflexive: false, title: 'Something About Us', artist: 'Daft Punk', type: 'music', link: 'http://youtu.be/VapvGNv8lcw'},
    //{fixed:false, id: 2, reflexive: false, title: 'colabor', artist: 'tommy', type: 'video', link:'//www.youtube.com/embed/VapvGNv8lcw'}
  ],
  lastNodeId = 0,
  //links = [
    //{source: nodes[0], target: nodes[1], left: false, right: true },
    //{source: nodes[1], target: nodes[2], left: false, right: true }
  //];*/
var force = null //force world
var drag_line; 
var path;
var circle;
function initWorld()
{
  force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .size([width, height])
    .linkDistance(link_dist)
    .charge(-500)
    .gravity(0.5)
    .linkStrength(2)
    .theta(0.2)
    .on('tick', tick)


  // define arrow markers for graph links
  /*
  svg.append('svg:defs').append('svg:marker')
      .attr('id', 'end-arrow')
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 6)
      .attr('markerWidth', 3)
      .attr('markerHeight', 3)
      .attr('orient', 'auto')
    .append('svg:path')
      .attr('d', 'M0,-5L10,0L0,5')
      .attr('fill', '#000');

  svg.append('svg:defs').append('svg:marker')
      .attr('id', 'start-arrow')
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 4)
      .attr('markerWidth', 3)
      .attr('markerHeight', 3)
      .attr('orient', 'auto')
    .append('svg:path')
      .attr('d', 'M10,-5L0,0L10,5')
      .attr('fill', '#000');
      */
  // line displayed when dragging new nodes
  drag_line = svg.append('svg:path')
    .attr('class', 'link dragline hidden')
    .attr('d', 'M0,0L0,0');

  // handles to link and node element groups
  path = svg.append('svg:g').selectAll('path'),
  circle = svg.append('svg:g').selectAll('g');

  
  svg.on('mousedown', mousedown)
    .on('mousemove', mousemove)
    .on('mouseup', mouseup);
  d3.select(window)
    .on('keydown', keydown)
    .on('keyup', keyup);
  restart();
  releaseAllNodes();
}





// mouse event vars
var selected_node = null,
    selected_link = null,
    mousedown_link = null,
    mousedown_node = null,
    mouseup_node = null;

function resetMouseVars() {
  mousedown_node = null;
  mouseup_node = null;
  mousedown_link = null;
}


// root centralization
// update force layout (called automatically each iteration)
function tick() {
  //fix root node
  /*
 svg.selectAll('circle')
  .attr("cx", function(d){ if (d.root) {return 480;} else {return d.x;} })
  .attr("cy", function(d){ if (d.root) {return 350;} else {return d.y;} })
  */
  // draw directed edges with proper padding from node centers
  path.attr('d', function(d) {
    var deltaX = d.target.x - d.source.x,
        deltaY = d.target.y - d.source.y,
        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),
        normX = deltaX / dist,
        normY = deltaY / dist,
        sourcePadding = d.left ? 12 : 12 ,
        targetPadding = d.right ? 12 : 12,
        sourceX = d.source.x + (sourcePadding * normX),
        sourceY = d.source.y + (sourcePadding * normY),
        targetX = d.target.x - (targetPadding * normX),
        targetY = d.target.y - (targetPadding * normY);
    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;
  });

  circle.attr('transform', function(d) {
    return 'translate(' + d.x + ',' + d.y + ')';
  });


}

// update graph (called when needed)
function restart() {
  // path (link) group
  path = path.data(links);

  // update existing links
  /*path.classed('selected', function(d) { return d === selected_link; })
    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })
    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; });*/


  // add new links
  path.enter().append('svg:path')
    .attr('class', 'link')
    .classed('selected', function(d) { return d === selected_link; })
    //.style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })
    //.style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; })
    .on('mousedown', function(d) {
      if(d3.event.ctrlKey) return;

      // select link
      mousedown_link = d;
      if(mousedown_link === selected_link) selected_link = null;
      else selected_link = mousedown_link;
      selected_node = null;
      restart();
    });

  // remove old links
  path.exit().remove();


  // circle (node) group
  // NB: the function arg is crucial here! nodes are known by id, not by index!
  circle = circle.data(nodes, function(d) { return d.id; });

  
  // update existing nodes (reflexive & selected visual states)
  circle.selectAll('circle')
    //.style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })
    .classed('reflexive', function(d) { return d.reflexive; })
    .classed('music', function(d) {return d.content == "music"})
    .classed('drawing',function(d) {return d.content == 'drawing'})
    .classed('video',function(d){return d.content == 'video'})
    .classed('novel',function(d){return d.content == 'novel'})
    .classed('root',function(d){return d.root})


  // add new nodes
  var g = circle.enter().append('svg:g');

  g.append('svg:circle')
    .attr('class', 'node')
    .attr('r', function(d){ if(d.root) return root_radius; else {return radius;}})
    //.style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })
    //.style('stroke', function(d) { return d3.rgb(colors(d.id)).darker().toString(); })
    .classed('reflexive', function(d) { return d.reflexive; })
    .classed('music', function(d) {return d.content == "music"})
    .classed('drawing',function(d) {return d.content == 'drawing'})
    .classed('video',function(d){return d.content == 'video'})
    .classed('novel',function(d){return d.content == 'novel'})
    .classed('root',function(d){return d.root})
    .on('mouseover', function(d) {
      if(!mousedown_node || d === mousedown_node) return;
      // enlarge target node
      d3.select(this).attr('transform', 'scale(1.1)');
    })
    .on('mouseout', function(d) {
      if(!mousedown_node || d === mousedown_node) return;
      // unenlarge target node
      d3.select(this).attr('transform', '');
    })
    .on('mousedown', function(d) {
      if(d3.event.ctrlKey) return;
      //console.log("assd");
      // select node
      mousedown_node = d;
      if(mousedown_node === selected_node)
      {
        //$(this).popover("hide")
        selected_node = null;
      } 
      else 
      {
        //console.log("select")
        //console.log($(this).popover("show")))
        //$(this).popover("show")
        selected_node = mousedown_node;
      }
      selected_link = null;

     
      // reposition drag line
      drag_line
        //.style('marker-end', 'url(#end-arrow)')
        .classed('hidden', false)
        .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);

      restart();
    })
    .on('mouseup', function(d) {
      if(!mousedown_node) return;
            // needed by FF
      drag_line
        .classed('hidden', true)
        .style('marker-end', '');

      // check for drag-to-self
      mouseup_node = d;
      if(mouseup_node === mousedown_node) {

        if(!d.root)
        {
          $("#info_title").text( d.title )
          $("#info_artist").text( d.artist )
          var type = d.content
          var content;
          if(type == 'drawing')
          {
            content =( "<img src='"+d.link+"'>")
          }
          else if(type == "music" || type == "video")
          {
            content =
            ("<embed width=250 height=142 src='"+d.link+"'></embed>")
          }
          else
          {
            content =
            ("<a href='"+d.link+"'>"+d.link+"</a>")
          } 
          //$("#infopopup").modal("show")

          if(! control_mode)
          {
            $(this).parent().popover({
              container: "body",
              html: true,
              title: d.title,
              content: content
            });
          }
          //$(this).parent().popover('show');
        }
        
        resetMouseVars(); return; }

    /*
      // unenlarge target node
      d3.select(this).attr('transform', '');

      // add link to graph (update if exists)
      // NB: links are strictly source < target; arrows separately specified by booleans
      var source, target, direction;
      if(mousedown_node.id < mouseup_node.id) {
        source = mousedown_node;
        target = mouseup_node;
        direction = 'right';
      } else {
        source = mouseup_node;
        target = mousedown_node;
        direction = 'left';
      }

      var link;
      link = links.filter(function(l) {
        return (l.source === source && l.target === target);
      })[0];

      if(link) {
        link[direction] = true;
      } else {
        link = {source: source, target: target, left: false, right: false};
        link[direction] = true;
        links.push(link);
      }

      // select new link
      selected_link = link;
      selected_node = null;

      restart();
      */ //end of mouseup
    })
    .on('mouseover',function(d) {
      if (!d.root)
      {
        $(this).tooltip({
        container: "body",
        title: d.title,
        })
        $(this).tooltip("show") 
      }
    });

  g.append('svg:text')
    .attr('x', 0)
    .attr('y', 4)
    .attr('class', 'id')
    .text(function(d) { if(d.root) return d.title; else return ""; });

  // show node IDs
  /*
  g.append('svg:text')
      .attr('x', 0)
      .attr('y', 4)
      .attr('class', 'id')
      .text(function(d) { return d.id; });
  */
  /*
  g.append('svg:text')
      .attr('x', function(d){
        if(d.root)
        {
          return -20;
        }
        else
          { return 15; }})
      .attr('y', 4)
      .attr('class', 'title')
      .attr('font-size', function(d){
        if (d.root)
        {
          return "20px"
        }
        else
        { return "10px";}})
      .attr('font-family','sans-serif')
      .text(function(d) { return d.title; });
  */
  // remove old nodes
  circle.exit().remove();

  // set the graph in motion
  force.start();
}

function mousedown() {
  // prevent I-bar on drag
  //d3.event.preventDefault();
  
  // because :active only works in WebKit?
  svg.classed('active', true);

  if(d3.event.ctrlKey || mousedown_node || mousedown_link) return;

  // insert new node at point
  /*
  var point = d3.mouse(this),
      node = {id: ++lastNodeId, reflexive: false};
  node.x = point[0];
  node.y = point[1];
  nodes.push(node);

  restart();
  */
}

function mousemove() {
  if(!mousedown_node) return;

  // update drag line
  drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);

  restart();
}

function mouseup() {
  if(mousedown_node) {
    // hide drag line
    
    /*
    drag_line
      .classed('hidden', true)
      .style('marker-end', '');
    */

    //var node = inputdata();
    //justAddedNode = null;

    $("#infobox").modal("show")

    var point = d3.mouse(this);
    addPoint = point;
    addStart = mousedown_node;
/*
    node.x = point[0];
    node.y = point[1];
    nodes.push(node);

    var source, target, direction;

    source = mousedown_node;
    target = node;
    direction = 'right';

    //var link =  links.filter(function(l){
    //  return (l.source === source && l.target === target);
    //})[0];
    var link = {source: source, target: target, left:false, right: false};
    link[direction] = true;
    links.push(link);
        restart();
  */  

  }

  // because :active only works in WebKit?
  svg.classed('active', false);

  // clear mouse event vars
  resetMouseVars();
}

function spliceLinksForNode(node) {
  var toSplice = links.filter(function(l) {
    return (l.source === node || l.target === node);
  });
  toSplice.map(function(l) {
    links.splice(links.indexOf(l), 1);
  });
}

// only respond once per keydown
var lastKeyDown = -1;

function keydown() {
  d3.event.preventDefault();

  if(lastKeyDown !== -1) return;
  lastKeyDown = d3.event.keyCode;

  // ctrl
  if(d3.event.keyCode === 17) {
    circle.call(force.drag);
    svg.classed('ctrl', true);
  }

  if(!selected_node && !selected_link) return;
  switch(d3.event.keyCode) {
    case 8: // backspace
    case 46: // delete
      if(selected_node) {
        nodes.splice(nodes.indexOf(selected_node), 1);
        spliceLinksForNode(selected_node);
      } else if(selected_link) {
        links.splice(links.indexOf(selected_link), 1);
      }
      selected_link = null;
      selected_node = null;
      restart();
      break;
    case 66: // B
      if(selected_link) {
        // set link direction to both left and right
        selected_link.left = true;
        selected_link.right = true;
      }
      restart();
      break;
    case 76: // L
      if(selected_link) {
        // set link direction to left only
        selected_link.left = true;
        selected_link.right = false;
      }
      restart();
      break;
    case 82: // R
      if(selected_node) {
        // toggle node reflexivity
        selected_node.reflexive = !selected_node.reflexive;
      } else if(selected_link) {
        // set link direction to right only
        selected_link.left = false;
        selected_link.right = true;
      }
      restart();
      break;
  }
}

function keyup() {
  lastKeyDown = -1;

  // ctrl
  if(d3.event.keyCode === 17) {
    circle
      .on('mousedown.drag', null)
      .on('touchstart.drag', null);
    svg.classed('ctrl', false);
  }
}

var addPoint = null;
var addStart = null;
var addEnd = null;
$("#save_btn").click(function(){

  $.ajax({
    url: '/nodes',
    method: 'post',
    dataType: 'json',
    data: {
      title: $("#node_title").val(),
      artist: $("#node_artist").val(),
      content: $("#node_type").val(),
      link: $("#node_link").val(),
      root:false,
      parent: addStart.id 
    },
    success: function( data )
    {
      if( !data.result )
      {
        alert("error")
        return;
      }
        
      var point = addPoint;
      var node = 
      {
        fixed: !dynamic_node_mode,
        id: data.node.id, 
        title: $("#node_title").val(),
        artist: $("#node_artist").val(),
        content: $("#node_type").val(),
        link: $("#node_link").val(),
        root:false
      }

      node.x = point[0];
      node.y = point[1];
      

      var source, target, direction;

      source = addStart;//mousedown_node;
      target = node;
      //direction = 'right';


      //var link =  links.filter(function(l){
      //  return (l.source === source && l.target === target);
      //})[0];
      //add Link
      $.ajax({
        url: '/links',
        method: 'post',
        dataType: 'json',
        data: {
          start_id: source.id,
          end_id: target.id
        },
        success: function( data )
        {
          if( !data.result )
            return;
          var link = {source: source, target: target, left:false, right: false};
          //link[direction] = true;
          nodes.push(node);
          links.push(link);
          addPoint = null;
          restart();
          $("#infobox").modal("hide");
        }
      })
      
    }
    
  }) 


});


$("#infobox").on("show",function(){
  d3.select(window)
  .on('keydown', null)
  .on('keyup', null);
})
$("#infobox").on("hide", function(){
  drag_line
    .classed('hidden', true)
    //.style('marker-end', '');

  $("#node_title").val("")
  $("#node_artist").val("")
  $("#node_link").val("")
  $("#node_type").val("")
  //d3.select(window)
  //.on('keydown', keydown)
  //.on('keyup', keyup);
})
$("#infopopup").on('hide',function(){
  $("#info_content").html("")
})


function releaseAllNodes()
{
  circle.selectAll('circle').each( function(d) { 
    // root should be always fixed;
    if (d.root)
    {
      d.fixed = true;
    }
    else
    {
      d.fixed = false;
    }
    return;
  })
  dynamic_node_mode = true;
}
function fixAllNodes()
{
  circle.selectAll('circle').each( function(d) { d.fixed = true; return;})
  dynamic_node_mode = false;
}


// app starts here

//restart();
</script>